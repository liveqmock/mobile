<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" 
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:youi="http://www.springframework.org/schema/youi"
		xsi:schemaLocation="
			http://www.springframework.org/schema/youi 
			http://www.springframework.org/schema/youi/spring-youi-2.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee 
			http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
  	 
  	<!-- 模块扫描,扫描规则 classpath*:/**/ModuleConfig.class -->
  	<context:component-scan base-package="com.gsoft.mobile.*" />
  	
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder location="classpath:config-*.properties"/>
	<!--
		Uses Apache Commons DBCP for connection pooling. See Commons DBCP documentation
		for the required JAR files. Alternatively you can use another connection pool
		such as C3P0, similarly configured using Spring.
	-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" 
			p:username="${jdbc.username}"
			p:password="${jdbc.password}"/>
			
	<!--jee:jndi-lookup id="dataSource" jndi-name="exam"/-->
	
 	<bean id="sessionFactory"
		class="com.gsoft.framework.context.hibernate.ModuleAnnotationSessionFactoryBean"
		lazy-init="false" autowire="default" dependency-check="default">
		<property name="dataSource" ref="dataSource" />
		<property name="lobHandler" ref="lobHandler"></property> 
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				
				<!-- 
					<prop key="hibernate.hbm2ddl.auto">update</prop>
					Create/update the database tables automatically when the JVM starts up
					 -->
				<!-- Turn batching off for better error messages under PostgreSQL 
					<prop key="hibernate.jdbc.batch_size">0</prop> -->
			</props>
		</property>
	</bean>
	
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"> 
	</bean>

	<!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
	<bean id="transactionManager"    class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
	    <property name="sessionFactory">  
	     <ref bean="sessionFactory" />  
	    </property>  
 	</bean> 


	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<context:annotation-config/>
	
	<!--
		Instruct Spring to retrieve and apply @AspectJ aspects which are defined
		as beans in this context (such as the CallMonitoringAspect below).
	-->
	<aop:aspectj-autoproxy  proxy-target-class="true"/>
	
	<!--
		Instruct Spring to perform automatic transaction management on annotated classes.
		The SimpleJdbcClinic implementation declares @Transactional annotations.
		"proxy-target-class" is set because of SimpleJdbcClinic's @ManagedOperation usage.
	-->
	<tx:annotation-driven proxy-target-class="true"/>

	<!--
		Exporter that exposes the Clinic DAO and the CallMonitoringAspect via JMX,
		based on the @ManagedResource, @ManagedAttribute, and @ManagedOperation annotations.
	-->
	<context:mbean-export/>
	
	<!--jbpm
	<bean id="springHelper" class="org.jbpm.pvm.internal.processengine.SpringHelper" />
  	<bean id="processEngine" factory-bean="springHelper" factory-method="createProcessEngine" />
 	-->
</beans>
